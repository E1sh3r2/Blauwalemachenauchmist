const questions = [{'id': 0, 'question': '<h1>Geben Sie eine Definition eines Projektes!</h1>', 'answer': ' \n- Einmaliges Vorhaben\n- Fester Start- und Endzeitpunkt\n- Begrenzte Ressourcen (Zeit, Personal, Budget)\n- Gewisse Komplexität\n- Qualitätsanspruch'}, {'id': 1, 'question': '<h1>Geben Sie eine Definition Magisches Dreieck bzgl. eines Projekts!  </h1>', 'answer': '\n![Magisches Dreieck](https://www.factro.de/wp-content/uploads/2020/05/magisches-dreieck-projektmanagement.png)\n- Leistung\n- Aufwand\n- Zeit\n- Nicht alle 3 Faktoren können gleichzeitig erfüllt werden'}, {'id': 2, 'question': '<h1>Beschreibe Sie Software-Kriterien!</h1>', 'answer': ' \n- Funktionalität\n  - Umfang der Software\n- Zuverlässigkeit\n  - Identische Funktionalität \n  - Über lange Zeiträume\n- Benutzbarkeit \n  - Usability \n  - Software einfach zu nutzen \n  - Intuitive Anwendung\n- Effizienz \n  - Software benötigt wenig Ressourcen \n  - Hohe Lauffähigkeit und Arbeitsleistung\n- Änderbarkeit \n  - Modularer und klar strukturierte Software\n  - Einfache Erweiterung der Software\n- Übertragbarkeit \n  - Übertragbarkeit auf andere Betriebssysteme \n  - Responsive \n- Portabilität\n- Robustheit\n- Verifizierbarkeit\n- Integrität'}, {'id': 3, 'question': '<h1>Nennen Sie die Säulen der Objekt Orientierung?</h1>', 'answer': ' \n- Verkapselung:\n- Vererbung:\n- Polymorphie (Vielgestaltigkeit):\n- Abstraktion:'}, {'id': 4, 'question': '<h1>Beschreiben Sie Verkapselung (OOP)?</h1>', 'answer': ' \n- Verkapselung:\n  - Auf Methoden und Variablen können unterschiedlich zugegriffen werden\n    - Private\n      - nur innerhalb in der Klasse, nicht vererbbar \n    - Public \n      - außerhalb der Klasse sowie Unterklassen\n    - Package\n      - innerhalb des gleichen Pakets \n    - Protected\n      - für Klassen und Unterklassen (vererbte Klassen) sichtbar'}, {'id': 5, 'question': '<h1>Beschreiben Sie Vererbung (OOP)?  </h1>', 'answer': '\n- Vererbung:\n  - Unterklassen erben Methoden und Verhalten von Oberklassen\n  - Unterklassen können Methoden von der Oberklasse überschreiben \n  - Generalisierung, Spezialisierung '}, {'id': 6, 'question': '<h1>Beschreiben Sie Polymorphie (OOP)?  </h1>', 'answer': '\n- Polymorphie (Vielgestaltigkeit):\n  - Poly = viele, morph = Form \n  - Implementierung von Oberklassen Methoden\n  - Methoden können überschrieben werden\n- Abstraktion:\n  - Die anderen Säulen sind eine Form der Abstraktion \n  - Bei der Modellierung werden bewusst bestimmte Eigenschaften „verborgen“ \n  - Nur notwendige Eigenschaften bleiben behalten'}, {'id': 7, 'question': '<h1>Beschreiben Sie Abstraktion (OOP)?  </h1>', 'answer': '\n- Abstraktion:\n  - Die anderen Säulen sind eine Form der Abstraktion \n  - Bei der Modellierung werden bewusst bestimmte Eigenschaften „verborgen“ \n  - Nur notwendige Eigenschaften bleiben behalten'}, {'id': 8, 'question': '<h1>Was ist ein Objekt?  </h1>', 'answer': '\n- Objekt \n  - Instanz von einer Klasse („new …“)\n  - Über Attribute eindeutig beschreibbar \n  - Verfügen über eine Lebensdauer'}, {'id': 9, 'question': '<h1>Was ist eine Klasse?  </h1>', 'answer': '\n- Bauplan für ein Objekt'}, {'id': 10, 'question': '<h1>Was ist ein Interface (OOP)?  </h1>', 'answer': '\n- „Vertrag“ zwischen Klassen – Vorgabe für Implementierung von Klassen\n- Verwendung für fehlende Mehrfachvererbung'}, {'id': 11, 'question': '<h1>Nennen Sie Objektorientierte Sprachen!  </h1>', 'answer': '\n- [C++, C#, JAVA, Python, PHP, Perl, Go, Ruby]'}, {'id': 12, 'question': '<h1>Was macht ein Compiler?  </h1>', 'answer': '\n- Kompiliert/übersetzt Quellcode in Maschinencode\n- Moderne Programmiersprachen arbeiten mit Bytecode (Java, C#)\n- Reine Compilersprachen sind C, C++ und Pascal\n- Extravagant: JIT-Compiler kompilieren den Code zur Laufzeit\n- Vorteil:\n  - Schneller, da die Hardware direkt angesprochen wird und kein Interpreter dazwischen liegt. Analyse wird zur compile-Zeit durchgeführt\n- Nachteile:\n  - Geringe bis keine Portabilität'}, {'id': 13, 'question': '<h1>Was ist Interpreter?  </h1>', 'answer': '\n- Interpretiert/(führt) Anweisungen zur Laufzeit (aus)\n- Sequenziell (Zeile für Zeile)\n- Fehler werden erst zur Laufzeit erkannt\n- Vorteil:\n  - Portabilität (Unabhängig vom OS)\n  - Einfachere Fehlersuche aufgrund von Line-By-Line-Execution\n- Nachteile:\n  - Langsamer als kompilierte Programme, aufgrund der Analyse (Lexikalische, Syntaktisch) zur Laufzeit\n  - Fehler treten erst zur Laufzeit auf'}, {'id': 14, 'question': '<h1>Nennen Sie Vorgehensmodelle!  </h1>', 'answer': '\n- Wasserfallmodell\n- V-Modell\n- Spiralmodell\n- Scrum'}, {'id': 15, 'question': '<h1>Was ist das Wasserfallmodell?</h1>', 'answer': '\n![Wasserfallmodell](https://www.ionos.de/digitalguide/fileadmin/DigitalGuide/Screenshots_2018/wasserfallmodell.png)\n- lineares Vorgehensmodell\n- jede Phase nur einmal durchlaufen\n  - keine Rücksprünge\n- fest definierte Phasen\n- Vorteile\n  - Einfache Struktur & feste Phasen\n  - Gute Dokumentation\n  - abschätzung von Kosten und Aufwand\n- Nachteile\n  - ungeeignet für komplexe Projekte\n  - keine Anpassung während des Projektablaufs\n  - Endanwender wird erst nach der Entwicklung einbezogen\n  - Fehler werden ggf. erst am Ende erkannt'}, {'id': 16, 'question': '<h1>Was ist das V-Modell?  </h1>', 'answer': '\n![V-Modell](https://projekte-leicht-gemacht.de/wp-content/uploads/2021/08/v-modell.jpg)\n- lineares Vorgehensmodell\n- fest definierte Phasen\n- Testphasen für jede Entwicklungsphase\n- Vorteile\n  - frühe Tests erkennt unvollständige Spezifikationen\n  - einfacher aufbau\n  - vergleichsweise wenig Kommunikation während der Entwicklung\n  - Hohe Testabdeckung\n- Nachteile\n  - ausführliche Dokumentation\n  - starr und wenig flexibel'}, {'id': 17, 'question': '<h1>Was ist das Spiralmodell?  </h1>', 'answer': '\n![alt text](https://www.ionos.de/startupguide/fileadmin/StartupGuide/Screenshots_2019/spiralmodell-DE-1.png)\n- iteratives Vorgehensmodell\n- Sektoren nicht unbedingt in jeder Umrundung notwendig\n- Risiko-orientiertes Modell\n- von innen nach außen durchlaufen\n- Vorteile\n  - flexibles, generisches Modell\n  - frühe Einbindung von Auftraggeber\n  - maximale Kontrolle über Kosten, Ressourcen\n- Nachteile\n  - hoher Managementaufwand\n  - verzögerungen durch regelmäßige Entscheidungen\n  - Know-how in Risikoanalyse erforderlich\n  - ungeeignet für kleine Projekte'}, {'id': 18, 'question': '<h1>Was ist das SCRUM?  </h1>', 'answer': '\n- agiles Vorgehensmodell\n- zwei- bis vierwöchige Sprints\n  - Planing\n    - Planung des nächsten Tasks\n    - festlegen der Tasks - Sprint Backlog\n  - Dailys\n    - Austausch des aktuellen Stands\n    - täglich 15 min\n    - Stand-up-Meeting\n  - Review\n    - Präsentation des (Teil)Produktes \n    - überprüfung der Ergebnisse\n    - anpassung Anforderungen\n  - Retroperspektive\n    - verbesserung des Sprints\n    - Probleme erkennen\n    - Zusammenarbeit verbessern\n- Rollen\n  - Product Owner\n    - Kommunikation mit Kunden\n    - Verantwortlich für\n      - Auslieferung\n      - Kosten\n      - Eigenschaften des Produktes\n  - Team\n    - Entwickeln das Produkt\n    - organisiert sich selbst\n  - Scrum Master\n    - erhält Scrum vorgehen\n    - regelt Kommunikationsprobleme\n  '}, {'id': 19, 'question': '<h1>Wie wird normalisiert?  </h1>', 'answer': '\n- 1 Normalform\n  - Atomare Wertebereiche (Name = Vorname, Nachname)\n- 2 Normalform\n  - 1 Normalform\n  - Alle nicht-schlüssel Attribute müssen voll funktional abhängig vom (zusammengesetzten) Schlüsselkandidaten sein\n- 3 Normalform\n  - 2 Normalform\n  - Keine transitiven (indirekten) Abhängigkeiten\n  - Relation/Relationale Datenbank'}, {'id': 20, 'question': '<h1>Warum wird normalisiert?  </h1>', 'answer': '\n- Reduzierung oder Beseitigung von Redundanzen'}, {'id': 21, 'question': '<h1>Was ist ein Primärschlüssel (Datenbanken)?  </h1>', 'answer': '\n- Eindeutiger Indikator eines Tupels \n- Kann aus mehreren Attributen bestehen'}, {'id': 22, 'question': '<h1>Was ist ein Fremdschlüssel (Datenbanken)?  </h1>', 'answer': '\n- Verweist auf einen Primärschlüssel aus einem anderen Tupel'}, {'id': 23, 'question': '<h1>Welche Beziehungen gibt es in einer Datenbank?  </h1>', 'answer': '\n- 1 zu n -> ein zu viele \n- n zu 1 -> viele zu eins \n- n zu m -> viele zu viele \n  - wird mit einer Zwischentabelle aufgelöst\t\n  - jeweils mit zwei 1 – n Beziehungen'}, {'id': 24, 'question': '<h1>Was ist eine Anomalie (Datenbanken)?  </h1>', 'answer': '\n- Anomalien (aus dem Griechischen: Unregelmäßigkeit)\n- Eine Anomalie ist eine Abweichung vom Normalen'}, {'id': 25, 'question': '<h1>Welche Anomalien gibt es (Datenbanken)?  </h1>', 'answer': '\n- Änderungsanomalie\n- Löschanomalie\n- Einfüge Anomalie'}, {'id': 26, 'question': '<h1>Was ist die Referentielle Integrität?  </h1>', 'answer': '\n- Zu jedem Fremdschlüssel muss es immer einen dazugehörenden Primärschlüssel geben \n- Verhindert Anomalien'}, {'id': 27, 'question': '<h1>Was ist/macht ein Debugger?  </h1>', 'answer': '\n- Werkzeug zum Diagnostizieren und Auffinden von Fehlern im Programmcode/Computersystemen\n- Steuerung des Kontrollflusses (Haltepunkte)\n- Inspizieren von Daten/Registern'}, {'id': 28, 'question': '<h1>Welche Testverfahren kennen Sie?  </h1>', 'answer': '\n- Whitebox \n  - Code und Struktur ist bekannt\n- Blackbox \n  - Code und Struktur ist unbekannt\n  - Verhalten nach Außen wird getestet -> Annahme > erwartetes Ergebnis \n  - Codeabdeckung \n- Schreibtisch \n  - Analoger Test zum Verstehen von Algorithmen\n  '}, {'id': 29, 'question': '<h1>Welche Softwaretests kennen Sie?  </h1>', 'answer': '\n- Unterschied Tests (Modul, Integration, System)'}, {'id': 30, 'question': '<h1>Was ist ein Modultest?  </h1>', 'answer': '\n- Sind die kleinste „Einheit“ bei Softwaretests \n- Testen auf Korrektheit eines Moduls'}, {'id': 31, 'question': '<h1>Was ist ein Integrationstests?  </h1>', 'answer': '\n- Gruppenkombinierte Tests, keine einzelnen Module \n- Zusammenspiel verschiedener Module untereinander werden getestet'}, {'id': 32, 'question': '<h1>Was ist ein Systemtest?  </h1>', 'answer': '\n- Testen von Komponenten in einem ganzen System'}, {'id': 33, 'question': '<h1> Was ist eine API?  </h1>', 'answer': '\n- Application Programming Interface \n- Schnittstelle zwischen unterschiedlichen Systemen/Programmen \n- Beispiel:\n  - Betriebssystem: Verbindung zwischen Hardware und Software \n  - REST-API: Schnittstelle für den Datenaustausch von Datenbank und Client-Anwendung '}, {'id': 34, 'question': '<h1>Welches Design Pattern kennen Sie?  </h1>', 'answer': '\n- Erzeugungsmuster (Creational Patterns)\n- Factory \n- Strukturmuster (Structural Patterns)\n- MVC \n- Verhaltensmuster (Behavioral Patterns)\n- Observer\n'}]